#!/bin/env bash
# +-- created by: achmur -------------- time4Linux ------------------------+ #
# |     __  __ __  __    _                           __           .--.     | #
# |    / /_/ // / / /   (_)___  __  ___  __   ____  / /          |ö_ö |    | #
# |   / __/ // /_/ /   / / __ \/ / / / |/_/  / __ \/ /           |\ü/ |    | #
# |  / /_/__  __/ /___/ / / / / /_/ />  < _ / /_/ / /           //   \ \   | #
# |  \__/  /_/ /_____/_/_/ /_/\__,_/_/|_/(_) .___/_/           (|     | )  | #
# |                                       /_/                 /'\_   _/`\\ | #
# |  Version     : 0.1                         2023-03-12     \___)=(___// | #
# +------------------------------------------ 2023-03-12 ------------------+ #
# |  Description :                                                         | # 
# |                                                                        | #
# +------------------------------------------------------------------------+ #
IGreen='\033[0;92m'
IYellow='\033[0;93m'
Yellow='\033[0;33m'
BIRed='\033[1;91m'
IPurple='\033[4;1;35m'
Color_Off='\033[0m'

DFILES=$HOME/dfiles
CFILES=$HOME/.config
BFILES=$HOME/dfiles_backup
BF_FOLDER=$BFILES/$(date +%Y-%m-%d)
ZFILES="$HOME/dfiles/zsh"
REPO=$(pwd)

my_dfiles_for_progs=(mc ranger vifm terminator)
my_dfiles_for_other=(gitconfig zshrc)
# ========================================================================== #
#                             FUNCTIONS                                      #
# ========================================================================== #

# messages
info(){
  echo -e $Yellow"Info:"$Color_Off" "$1
}

success(){
  echo -e $IGreen$1$Color_Off
}

error(){
  echo -e $BIRed"Error:"$Color_Off" "$1
}

warn (){
  echo -e $IPurple"Warning:"$Color_Off" "$1
}

df_start(){
  if [[ ! -d $DFILES ]]; then
    mkdir -p $DFILES
    cp -r $REPO/zsh/ $DFILES
  else 
    mv $DFILES $DFILES.bak
    cp -r $REPO/zsh/ $MY_FILES
  fi
}

# creating backups 
bak_files(){
  if [[ ! -d $BFILES ]]; then
    mkdir -p $BF_FOLDER
  fi
  # moving files
  for p in ${my_dfiles_for_progs[@]}; do
    TARGET_P=$HOME/.config/$p
    if [[ -d $TARGET_P ]]; then
      cp -r $TARGET_P $BF_FOLDER
      info "$p copied to $(basename $BFILES)/$(basename $BF_FOLDER)"
    else
      warn "There was no configuration for $p - probably not installed"
    fi
  done
  for o in ${my_dfiles_for_other[@]}; do
    if [[ -e $HOME/.$o ]]; then
      cp $HOME/.$o $BFILES
      info ".$o copied to $(basename $BFILES)/$(basename $BF_FOLDER)"
    else
      warn "There was no .$o - probably not installed"
    fi
  done
  if [[ -d $CFILES/lvim/lua ]]; then
    mv $CFILES/lvim/lua $BFILES
    info "lvim config moved to $(basename $BFILES)/$(basename $BF_FOLDER)"
  else
      warn "There was no configuration for lvim - probably not installed"
  fi
}

ln_progs(){
  if ! command -v $p &>/dev/null; then
    info "Installing $p..."
    sudo apt install -y $p
    if [[ -d $TARGET_P ]]; then
      rm -fr $TARGET_P
      ln -s $REPO/$p $TARGET_P
    elif [[ -L $TARGET_P ]]; then
      rm $TARGET_P
      ln -s $REPO/$p $TARGET_P
      warn "Existing symlink for $p removed and created new one."
    fi
  fi
}

ln_other(){
  if [[ -f $TARGET_O ]]; then
    rm $TARGET_O
    warn "Existing file for $o replaced."
  else
    ln -s $REPO/$o $TARGET_O
  fi
}

lg(){
  if [[ ! -e /usr/local/bin/lazygit ]]; then
    if ! command -v git $>/dev/null; then
      echo "Installing git..."
      sudo apt install -y git
    fi
    echo "Installing lazygit..."
    LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
    curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
    tar xf lazygit.tar.gz lazygit
    sudo install lazygit /usr/local/bin
    rm lazygit.tar.gz
    echo "Lazygit installation successful"
  else
    echo "Lazygit already installed"
  fi
}

delta(){
  if ! command -v delta &>/dev/null; then
    # checking for latest version of delta
    local ver=$(curl -s https://lib.rs/crates/git-delta | grep -A 4 "versions" | awk 'END{print}')
    # setting latest download file and installation
    dfile=git-delta-musl_"$ver"_amd64.deb
    echo -e "Installing delta with version "$ver
    cd $HOME/tmp
    wget -q https://github.com/dandavison/delta/releases/download/"$ver"/$dfile
    sudo apt install -y ./$HOME/tmp/$dfile
    rm $HOME/tmp/$dfile
  else 
    echo "Delta already installed"
  fi
}

bat(){
  if ! command -v bat &>/dev/null; then
    # checking for latest version of bat
    local ver=$(curl -s https://github.com/sharkdp/bat/releases | grep -m 1 -A 4 wb-break-all | awk 'END{print}' | awk -F "\"" '{print $2}' | awk -F "/" '{print $NF}' | sed -e '1s/^.//')
    # setting latest download file and installation
    bfile=bat-musl_"$ver"_amd64.deb
    echo -e "Latest version of "$IGreen"bat $ver $Color_Off"
    sleep 1
    cd $HOME/tmp
    wget -q https://github.com/sharkdp/bat/releases/download/v"$ver"/$bfile
    sudo apt install -y ./$HOME/tmp/$bfile
    rm $HOME/tmp/$bfile
  else
    echo "Bat already installed"
  fi
}

neovim(){
  if command -v nvim &>/dev/null; then 
    # checking for current version of nvim
    local ver=$(nvim -version | head -n1 | awk '{print $2}' | awk -F . '{print $2$3}')
    # if version is less then 0.8.1 then installing newer
    if (( $ver <= "82" )); then
      sudo apt remove -y neovim
      sudo apt autoremove -y && sudo apt clean
      echo "Removing older version of neovim"
      echo "Downloading and installing newe version of neovim"
      mkdir -p $HOME/tmp
      wget https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.tar.gz -P $HOME/tmp
      sudo apt install -y $HOME/tmp/nvim-linux64.deb
      echo "Cleaning up"
      rm $HOME/tmp/nvim-linux64.deb
      echo -e "\nThe newest nvim "$IGreen"v0."${ver:0:1}.${ver:1}$Color_Off" installed"
    elif  (( $ver > "82" )); then
      echo -e "\nInstalled neovim "$IGreen"v0."${ver:0:1}.${ver:1}$Color_Off" is proper version"
    fi
  else
    cd $HOME/tmp
    echo "Downloading and installing newe version of neovim"
    wget https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.deb
    sudo apt autoremove -y && sudo apt clean
    sudo apt install -y $HOME/tmp/nvim-linux64.deb
    rm nvim-linux64.deb
    echo -e "\nZainstalowano neovim"
    fi
  }

  rust(){
    if command -v rustc &>/dev/null; then 
      # checking for rust version installed
      ver=$(rustc --version | awk '{print $2}' | awk -F . '{print $1$2}')
      if (( $ver <= "164" )); then
        sudo apt remove -y rustc
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
        echo -e "\nZainstalowano najnowszą wersję "$IGreen"rust "${ver:0:1}.${ver:1}".0"$Color_Off
      elif (( $ver > "164" )); then
        echo -e "\nZainstalowana wersja rust jest wystarczająca."
      fi
    else
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
      echo -e "\nZainstalowano "$IGreen"rust "${ver:0:1}.${ver:1}".0"$Color_Off
    fi
  }
  golang(){
    if ! [[ -d /usr/local/go ]]; then
      cd $HOME/tmp
      wget https://go.dev/dl/go1.20.2.linux-amd64.tar.gz
      sudo tar -C /usr/local -xvf $HOME/tmp/go1.20.2.linux-amd64.tar.gz
      export PATH=$PATH:/usr/local/go/bin
      rm $HOME/tmp/go1.20.2.linux-amd64.tar.gz
      echo "Zainstalowano Golang"
    else 
      echo "Golang zainstalowany, instalacja pominięta"
    fi
  }
  # lunarvim dependencies
  lvim_dep(){
    if command -v nala &>/dev/null; then
      sudo nala update && sudo nala install -y npm pip ripgrep cargo git make python3 nodejs fd-find
    else
      sudo apt update && sudo apt install -y npm pip ripgrep cargo git make python3 nodejs fd-find
    fi
  }
  lunarvim(){
    neovim
    lvim_dep
    npm i tree-sitter-cli
    pip install pynvim
    # lunarvim testing and installation 
    if [[ -d $HOME/.config/lvim ]]; then
      echo "LunarVim already installed" 
    else
      LV_BRANCH='release-1.2/neovim-0.8' bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/fc6873809934917b470bff1b072171879899a36b/utils/installer/install.sh)
      echo "LunarVim installed successfuly"
    fi
  }
  # |------------------------ zsh plugin installer --------------------------| #
  zsh_plug(){
    git -C $ZFILES clone https://github.com/$1.git
  }

# |------------------------ plugins installation -------------------------| #
zsh_install(){
  if ! command -v zsh &>/dev/null; then
    sudo apt install -y zsh
  fi
  if [[ ! -d $ZFILES/fzf ]]; then
    a=prefix=\'~/.fzf\'
    b=prefix=
    c=$ZFILES/fzf
    zsh_plug "junegunn/fzf"
    sed -ie "s@$a@$b$c@g" $ZFILES/fzf/install 
    $ZFILES/fzf/install --all --completion --no-fish --no-bash
    mv ~/.fzf.zsh $ZFILES/settings/fzf.zsh
  fi

  if [[ ! -d $ZFILES/fzf-tab ]]; then
    zsh_plug "Aloxaf/fzf-tab"
  fi

  if [[ ! -d $ZFILES/zsh-autosuggestions ]]; then
    zsh_plug "zsh-users/zsh-autosuggestions"
  fi

  if [[ ! -d $ZFILES/zsh-completions ]]; then
    zsh_plug "zsh-users/zsh-completions"
  fi

  if [[ ! -d $ZFILES/zsh-syntax-highlighting ]]; then
    zsh_plug "zsh-users/zsh-syntax-highlighting"
  fi

  if [[ ! -d $ZFILES/powerlevel10k ]]; then
    zsh_plug "romkatv/powerlevel10k"
  fi

  if [[ ! -d $ZFILES/git-fuzzy ]]; then
    zsh_plug "bigH/git-fuzzy"
  fi

  if [[ ! -d $ZFILES/zsh-history-substring-search ]]; then
    zsh_plug "zsh-users/zsh-history-substring-search"
  fi

  if [[ -f $HOME/.zshrc ]]; then
    rm ~/.zshrc && ln -s $ZFILES/zshrc $HOME/.zshrc 
  fi

  if [[ ! -L $CFILES/zsh ]]; then
    ln -s $REPO/zsh/ $CFILES/zsh
  fi
}
# ========================================================================== #
#                          other symlinks                                    #
# ========================================================================== #
# creating basic folder

# ========================================================================== #
#                        symlinks for programs                               #
# ==============<Up>============================================================ #

menu(){
  echo -e "\nPick progrom from the list to install...
  1) Backup dotfiles
  2) Create new dfiles
  3) Prepare zsh configuration
  4) Install programs 
  "$IGreen"0) Quit\n"$Color_Off
}

menu_progs(){
  echo -e "\nPick progrom from the list to install...
  1) lazygit
  2) docker
  3) lazydocker & docker
  4) delta
  5) bat
  6) NeoVim
  7) LunarVim
  8) Rust       
  9) Golang     
  "$IGreen"0) Quit\n"$Color_Off
}
# ########################################################################## #
# ========================================================================== #
#                            CASE statement                                  #
# ========================================================================== #
# ########################################################################## #

menu
repeat=true
while [ "$repeat" = true ]; do
  repeat=false
  read -s -n 1 NUMBER
  while true; do
    case $NUMBER in
      0|q) exit 0 ;;
      1) 
        repeat=true
        bak_files
        menu
        break
        ;;
      2) 
        repeat=true
        df_start
        ln_progs
        ln_other
        if [[ ! -L $DFILES/aliases ]]; then
          ln -s $REPO/aliases $DFILES/aliases
        fi
        menu
        break 
        ;;
      3) 
        repeat=true
        zsh_install
        menu
        break 
        ;;
      4) 
        repeat=true
        menu_progs
        repeat_progs=true
        while [ "$repeat_progs" = true ]; do
          repeat_progs=false
          read -s -n 1 NUMBER_PROGS
          while true; do
            case $NUMBER_PROGS in
              0|q) exit 0 ;;
              1) 
                repeat_progs=true
                lg  
                menu
                break
                ;;
              2) 
                repeat_progs=true
                dcr
                menu
                break 
                ;;
              3) 
                repeat_progs=true
                lzd
                menu
                break 
                ;;
              4) 
                repeat_progs=true
                delta
                menu
                break 
                ;;
              5) 
                repeat_progs=true
                bat
                menu
                break 
                ;;
              6) 
                repeat_progs=true
                neovim
                menu
                break 
                ;;
              7) 
                repeat_progs=true
                lvim_dep
                lunarvim
                menu
                break 
                ;;
              8) 
                repeat_progs=true
                rust
                break 
                ;;
              9) 
                repeat_progs=true
                golang
                break 
                ;;
              *) 
                repeat_progs=true
                echo -e $IRed"Are you bind or drunk?" $IYellow$NUMBER_PROGS$Color_Off$IRed" is invalid choice."
                echo -e "Pick the right number..."$Color_Off
                menu
                break 
                ;;
            esac
          done
        done
        menu
        break 
        ;;
      *) 
        repeat=true
        echo -e $IRed"Are you bind or drunk?" $IYellow$NUMBER$Color_Off$IRed" is invalid choice."
        echo -e "Pick the right number..."$Color_Off
        menu
        break 
        ;;
    esac
  done
done
# symlinks other then in .config
# ln -s $(pwd)/lazygit $CFILES/lazygit
# ln -s $(pwd)/.gitconfig $HOME/.gitconfig
